오후 3:42 2022-03-08

출처: 
https://www.youtube.com/watch?v=kWiCuklohdY&t=16s



목록
# 1. 설치
https://www.python.org/ 
에 들어가서 파이썬 설치.
	- Add python (버젼) to Path 체크
	- Customize installation
	- 경로단축 C:\Python
	- 설치
	=======

	- VSCODE 설치
	

# 2. 사용
  ## A0308 
  	- python 파일의 확장자는 .py이다. 
	- C 와 java와 달리 ;은 붙지않는다.
  
	- print 로 출력시 자동 \n
	- 정수,음수,실수, 연산식 출력.

	- 문자형 자료
	 '' 또는 "" 으로 표현할 수 있다.
	 여러번 사용시 문자뒤에 *횟수를 붙여서 사용.

	- Boolean형
	 print( 5 > 10 )
		false로 자동으로 표시된다.
	 
	 print(not True)
	 ture가 아니다를 표현할 수있다.

	
	- 정수/ Boolean형등등을 문자열로 표시시 str()로 
	 해당 변수를 감싸줘야한다.


 ### 
   	- 주석은 #문단 과 '''로 문장을 주석화 시킬 수 있다.

 ###
	- String문자열을 변수에 표현시
	'' , "" , """ """ 으로 표시할 수 있다.

	- 슬라이싱
	변수 내에서 잘라서 사용하는 형태 
	ex) 주민번호 변수에서 주민번호 앞자리 사용.

		해당 수	- 변수[숫자]
				- 변수[시작지점:끝지점] # 시작에서 끝미만 >> [0:2] >> 0,1
				- 변수[:끝지점] 		# 처음부터 끝지점까지
				- 변수[시작지점:]		# 시작지점부터 끝까지.
				- 변수[-지점:]			# 뒤에서부터 시작. >> -1에서 시작.
				123456 일시 [-5:] >>	23456

	- 문자열 포맷
		%s - 문자열		str
		%c - 문자 1개	char
		%d - 정수		int
		%f - 부동소수	floationg-point
		%o - 8진수		
		%x - 16진수
		%% - Literal

		**(점프투파이썬)
		 포매팅 연산자 %d , %를 같이 쓸때는 %%를 쓴다. >> "Error is %d%." % 98
		
			Error is 98%로 출력되지 않고 , 올바르지 않는 값 오류(Value Error) 출력된다.
			>> 문자열 포맷 코드인 %d 와 %가 같은 문자열 안에 존재하는 경우, 
			>> %를 나타내려면 반드시 '%%로 써야하는 법칙'이 있기 때문이다.

			고로 다음 문자를 실행하려면 " Error is %d%%." % 98 로 써야한다.

		**(점프투파이썬)
		 "%10s" hi
		  ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ
		  1 2 3 4 5 6 7 8 hi
		  공백			  단어

		  "%-10s" hi
		   ㅁㅁㅁㅁㅁㅁㅁㅁㅁㅁ
			hi 3 4 5 6 7 8 9 10

		  "%0.4"f 
		  소수점 4자리까지

	- 탈출문자

 ##

	- 사전 Dictionary


		**(점프투파이썬)
		 < 주의사항 >
		  - Key는 고유한 값이므로 중복되는 Key값을 설정해 놓으면 하나를 제외한 나머지 것들이 모두 무시된다는 점을 주의.
		  a = {1:'a', 1:'b'}
		   1:'a'쌍이 무시된다.

		  - Key를 통해서 Value를 얻는 딕셔너리의 특징에서 비롯된다. 
		  즉, 동일한 Key가 존재하면 어떤 Key에 해당하는 Value를 불러야 할지 알 수 없기 때문.
		  a = {[1,2] : 'hi'} << 리스트를 Key로 사용. 사용할 수 없다는 오류가 발생한다.

	- Tuple

	- Set

	- 리스트 자료구조의 변경

 ##

	- if
	  { }없이 조건문마다 : 를 사용한다.
		**(점프투파이썬)
		 - while, for, def, class 문장의 끝에 :(콜론)이 항상 들어간다.
		 들여쓰기(indentation)를 하도록 만들었기 때문이다.

	  else 대신 elif를 사용한다.
	  조건문에 or를 사용할 수 있다.

	- for
		한줄본.
		students = [i+100 for i in students] 
			# 100+i 값을 student에 넣는다.
				# i는 students의 리스트값을 하나씩 불러와 실행해 리스트로 넣는다.

			[실행문 for i in 대상(리스트)]

	- while
		조건문이 True일시 실행한다. (무한루프에 빠질 수 있다.)

	- continue
		아래 실행문을 실행하지않고 다음 반복문으로 스킵.

	- break
		반복문을 중지하고 진행.

 ## 
  함수 정의
	- def 함수명():
		> 호출시
		함수명()

	- 전달값 / 반환값
	 	전달값 - 매개변수 (ㅁ, ㅁ)
		반환값 - return 식.

	- 기본값

	- 호출시 해당함수의 키값을 입력하는 형식으로 해놓으면 순서에 상관없이도 넣을 수 있다.

	- 가변인자. (function_sev.py)
		>  ..format() , end=" ")
		 	print("A...")
		end(" ") 사용시 밑에은 print("A..)랑 같이 이어서진다.
		
		> 인자에 *을 붙혀서 N개 받은만큼 N개를 반환해준다. 변동있게 처리.

	- 전역/지역변수

 ##
  표준입출력
   
	sep = " A "
		각 ,사이에 해당 내용 (A)가 들어간다.

	end = "?" 
		문장의 끝부분을 ?로 바꿔달라.는 의미

	### 로그 출력시
		import sys
		file = sys.stdout
			표준 출력어로 출력
		file = sys.stderr
			표준 에러어로 출력
		둘이 로그 확인용으로 처리시 사용된다.

	### 정렬
		print(A.ljust(숫자))
			>> .lijust()
			숫자만큼 공백으로 가진후 왼쪽정렬

		print(A.rjust(숫자))	
			>> .rjust()
			숫자만큼 공백을 가진후 오른쪽정렬

		.zfill(3)
			>> 숫자(3)만큼 공간 확보후 값을 넣는다.
			만약 공백있을경우 그 자리는 0으로 채워놓는다.

	### 출력문예제
		print("{0: >10}"...
				  ----	
				  1234

				1) 빈칸(공백)
					빈자리를 어떻게 처리. (현재는 공백화)

				2) >
					오른쪽 정렬

				3,4) 10 라는 숫자.
					총 공간확보량.

		..>+숫자..
		 오른쪽정렬하되 +를 붙인다.
		 	처리되는 수가 양수일시 +
			 			음수일시 - 가 붙는다.

		### 파일입출력
		open - 진행 - close 순으로 진행된다.

		open("파일명.확장자", "w(목적, w는 write 쓰기", endcoding="utf-8)

		w - write  쓰기, 만약 파일이 있을경우 덮어쓰기.
		a - uphand 이어쓰기
		r - 
		파일명.close()


		### pickle


		### with
		파일을 열고 / 닫고하는걸 더 자연스럽게 할수 있다.

		with 파일열기 as 변수명:
		  > 읽은 파일의 내용을 변수명에 저장.


	 ##
  	 클래스
		> 

		- __init___
		 > 생성자.
			객체가 생성시 자동으로 생성.

		- self
		 자기자신을 의미. java의 this와 비슷한 개념.

		- 멤버변수
		 > 클래스에 선언된 속성.
		 > 변수.멤버변수
		
		- 메소드
			def __init__ 후에 선언된 것들

			def 메소드(self, A#, B)
			self.A = A#
			>> A#에서 받은 값을 밑에 A#에 받고 그걸 self.A에 대입.

		- 상속
		EX)
			class Unit:
    			def __init__(self, name, hp):
        			self.name = name
        			self.hp = hp

			class AttackUnit(Unit):
    			def __init__(self, name, hp, demage):
        			Unit.__init__(self, name, hp)
       				 self.demage = demage

		Unit에서 설정 
				

		- 다중상속

		- 메소드 오버라이드

		- pass
			정의해야될것을 일단 넘기는 행위.

		- super
			상속받은 
			ex)
			 Unit.__init__(self, name, hp, 0) 을
		  >> super().__init__(name, hp, 0) 으로 정의할 수 있다.
		  	이때 self는 사용하지 않는다. 	
		  
		  >> 다중상속시 super 먼저 받는 멤버변수만 해당되어
		  다른 멤버변수는 받지 못한다.
		  다중때는 사용x


# 3. 코드제
jeongsam3659 / !Ac...
